#!/bin/bash
# Script to run all examples and generate .docx files for validation

set -e  # Exit on error

echo "üöÄ Running all examples to generate .docx files..."
echo ""

# Resolve directories
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Change to examples directory
cd "$SCRIPT_DIR"

VALIDATOR_PROJECT="$ROOT_DIR/DocxValidator"
VALIDATE_DOCX=true

if ! command -v dotnet >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  dotnet CLI not found; skipping Open XML validation"
    VALIDATE_DOCX=false
elif [ ! -f "$VALIDATOR_PROJECT/DocxValidator.csproj" ]; then
    echo "‚ö†Ô∏è  DocxValidator project not found at $VALIDATOR_PROJECT; skipping Open XML validation"
    VALIDATE_DOCX=false
else
    echo "üîç Open XML validation enabled via DocxValidator"
fi

EXAMPLES=(
    "01_basic"
    "02_intermediate"
    "04_fields"
    "05_styles"
    "06_sections"
    "07_advanced"
    "08_images"
    "09_advanced_tables"
    "10_paragraph_spacing"
    "11_multi_section"
)

FAILED=()
PASSED=()
GENERATED_FILES=()
VALIDATED_FILES=()
VALIDATION_FAILED=()

for example in "${EXAMPLES[@]}"; do
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üìù Running $example..."
    
    if cd "$example"; then
        # Build
        if go build -o ./example_binary 2>&1; then
            # Run the example
            if ./example_binary 2>&1; then
                echo "‚úÖ $example executed successfully"
                PASSED+=("$example")
                
                # Find generated .docx files
                docx_files=$(find . -name "*.docx" -type f 2>/dev/null || true)
                if [ -n "$docx_files" ]; then
                    while IFS= read -r file; do
                        relative_file="${example}/${file#./}"
                        absolute_file="$PWD/${file#./}"

                        case "$relative_file" in
                            *_model.docx|*Nested_Tables_Recovered.docx)
                                # Skip legacy comparison artifacts that are not regenerated by this run.
                                continue
                                ;;
                        esac

                        GENERATED_FILES+=("$relative_file")
                        echo "   üìÑ Generated: ${file#./}"

                        if [ "$VALIDATE_DOCX" = true ]; then
                            echo "   üîç Validating with DocxValidator..."
                            if output=$(dotnet run --project "$VALIDATOR_PROJECT" -- "$absolute_file" 2>&1); then
                                echo "   ‚úÖ Open XML validation passed"
                                VALIDATED_FILES+=("$relative_file")
                            else
                                echo "   ‚ùå Open XML validation failed"
                                VALIDATION_FAILED+=("$relative_file")
                                echo ""
                                echo "$output" | sed 's/^/      /'
                                echo ""
                            fi
                        fi
                    done <<< "$docx_files"
                fi
                
                # Clean up binary
                rm -f ./example_binary
            else
                echo "‚ùå $example execution failed"
                FAILED+=("$example")
            fi
        else
            echo "‚ùå $example build failed"
            FAILED+=("$example")
        fi
        cd ..
    else
        echo "‚ùå Could not enter directory $example"
        FAILED+=("$example")
    fi
    echo ""
done

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üìä SUMMARY"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ Passed: ${#PASSED[@]}/${#EXAMPLES[@]}"
echo "‚ùå Failed: ${#FAILED[@]}/${#EXAMPLES[@]}"
echo "üìÑ Files generated: ${#GENERATED_FILES[@]}"
if [ "$VALIDATE_DOCX" = true ]; then
    echo "üîç Validations passed: ${#VALIDATED_FILES[@]}"
    echo "üö´ Validations failed: ${#VALIDATION_FAILED[@]}"
else
    echo "üîç Open XML validation skipped"
fi

if [ ${#FAILED[@]} -gt 0 ]; then
    echo ""
    echo "Failed examples:"
    for example in "${FAILED[@]}"; do
        echo "  ‚ùå $example"
    done
fi

if [ ${#GENERATED_FILES[@]} -gt 0 ]; then
    echo ""
    echo "Generated .docx files:"
    for file in "${GENERATED_FILES[@]}"; do
        echo "  üìÑ $file"
    done
fi

if [ "$VALIDATE_DOCX" = true ] && [ ${#VALIDATION_FAILED[@]} -gt 0 ]; then
    echo ""
    echo "Validation failures:"
    for file in "${VALIDATION_FAILED[@]}"; do
        echo "  ‚ùå $file"
    done
fi

echo ""
if [ ${#FAILED[@]} -gt 0 ] || { [ "$VALIDATE_DOCX" = true ] && [ ${#VALIDATION_FAILED[@]} -gt 0 ]; }; then
    if [ ${#FAILED[@]} -gt 0 ]; then
        echo "‚ùå Some examples failed"
    fi
    if [ "$VALIDATE_DOCX" = true ] && [ ${#VALIDATION_FAILED[@]} -gt 0 ]; then
        echo "‚ùå Some .docx files failed Open XML validation"
    fi
    exit 1
else
    echo "‚úÖ All examples executed successfully!"
    if [ "$VALIDATE_DOCX" = true ]; then
        echo "üéâ All generated .docx files passed Open XML validation"
    else
        echo "üéâ You can now open the generated .docx files to validate them"
    fi
    exit 0
fi
